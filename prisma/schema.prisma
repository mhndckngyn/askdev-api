generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum AuthProvider {
  EMAIL
  GOOGLE
  GITHUB
}

model User {
  id             String   @id @default(uuid())
  role           Role     @default(MEMBER)
  username       String   @unique
  profilePicture String
  bio            String?
  github         String?
  showGithub     Boolean  @default(false)
  createdAt      DateTime @default(now())

  account Account? @relation()

  answers       Answer[]
  answerVotes   AnswerVote[]
  comments      Comment[] 
  questionVotes QuestionVote[]
  commentVotes  CommentVote[]
}

model Account {
  id       String       @id @default(uuid())
  userId   String       @unique
  provider AuthProvider
  email    String?      @unique

  // cho GOOGLE/GITHUB auth
  providerUserId String?

  // cho EMAIL auth
  password          String?
  isVerified        Boolean
  verificationToken String?
  tokenExpiry       DateTime?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerUserId])
}

model Question {
  id        String   @id @default(uuid())
  userId    String?
  title     String   
  content   Json
  images    String[]
  createdAt DateTime @default(now())
  isEdited  Boolean  @default(false)
  upvotes   Int      @default(0)
  downvotes Int      @default(0)
  isSolved  Boolean  @default(false)

  edits QuestionEdit[]
  tags  Tag[]          @relation("QuestionTags")

  answers Answer[]
  votes   QuestionVote[]
}

model QuestionEdit {
  questionId      String
  createdAt       DateTime
  previousContent Json?
  previousTitle   String?

  question Question @relation(fields: [questionId], references: [id])

  @@id([questionId, createdAt])
}

model QuestionVote {
  userId     String
  questionId String
  type       Int  
  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])

  @@id([userId, questionId])
}


model Tag {
  id            String  @id @default(uuid())
  name          String  @unique
  descriptionVi String?
  descriptionEn String?

  questions Question[] @relation("QuestionTags")
}

model Answer {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  content    String
  createdAt  DateTime @default(now())
  isEdited   Boolean  @default(false)
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)
  isChosen   Boolean  @default(false)

  user     User      @relation(fields: [userId], references: [id])
  question Question  @relation(fields: [questionId], references: [id])
  edits    AnswerEdit[]
  votes    AnswerVote[]
  comments Comment[]
}

model AnswerEdit {
  answerId        String
  createdAt       DateTime @default(now())
  previousContent String

  answer Answer @relation(fields: [answerId], references: [id])
  
  @@id([answerId, createdAt])
}

model AnswerVote {
  userId   String
  answerId String
  type     Int  

  user   User   @relation(fields: [userId], references: [id])
  answer Answer @relation(fields: [answerId], references: [id])

  @@id([userId, answerId])
}


model Comment {
  id        String   @id @default(uuid())
  userId    String
  answerId  String
  content   String
  upvotes   Int      @default(0)
  downvotes Int      @default(0)
  createdAt DateTime @default(now())
  isEdited  Boolean  @default(false)

  user      User     @relation(fields: [userId], references: [id])
  answer    Answer   @relation(fields: [answerId], references: [id])
  edits     CommentEdit[]

  commentVotes CommentVote[]
  @@index([answerId])
}

model CommentEdit {
  commentId    String
  createdAt    DateTime @default(now())
  previousContent String

  comment Comment @relation(fields: [commentId], references: [id])

  @@id([commentId, createdAt])
}

model CommentVote {
  userId    String
  commentId String
  type      Int   

  user      User    @relation(fields: [userId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
}

